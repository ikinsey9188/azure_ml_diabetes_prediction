{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **Project Overview and Objectives**\n",
        "\n",
        "## **Project Overview:**\n",
        "\n",
        "In this project, the objective is to develop a robust machine learning model that can predict the likelihood of a patient being diabetic based on various health metrics. The project involves exploring multiple machine learning algorithms, comparing their performance, and selecting the best-performing model for potential deployment. The entire process will be tracked and managed using MLflow, an open-source platform for managing the complete machine learning lifecycle. This includes experimentation, tracking, model management, and deployment capabilities provided by Azure Machine Learning Studio.\n",
        "\n",
        "## **Objectives:**\n",
        "\n",
        "1. **Data Preparation:**\n",
        "   - Load and preprocess the diabetes dataset, ensuring the data is clean and ready for model training.\n",
        "   - Split the dataset into training and test sets to evaluate the model's performance.\n",
        "\n",
        "2. **Model Training and Evaluation:**\n",
        "   - Train multiple machine learning models, including Logistic Regression, Decision Tree, and Random Forest.\n",
        "   - Utilize MLflow's autologging feature to automatically track the parameters, metrics, and artifacts for each model.\n",
        "   - Manually log additional metrics (e.g., accuracy) and compare the performance of each model.\n",
        "\n",
        "3. **Model Selection:**\n",
        "   - Analyze the logged metrics to identify the best-performing model based on accuracy.\n",
        "   - Register the best model in Azure ML for future use, ensuring it is ready for deployment.\n",
        "\n",
        "4. **Model Deployment (Optional):**\n",
        "   - Optionally deploy the best model as a web service in Azure, making it accessible for real-time predictions in external applications.\n",
        "\n",
        "## **Process Overview:**\n",
        "\n",
        "1. **Environment Setup:**\n",
        "   - Verify that the necessary libraries and SDKs are installed, including `azure-ai-ml`, `mlflow`, `scikit-learn`, and others required for model training and tracking.\n",
        "\n",
        "2. **Data Loading and Preprocessing:**\n",
        "   - Load the diabetes dataset from a CSV file.\n",
        "   - Split the data into features (input variables) and labels (output variable) and further split it into training and test sets.\n",
        "\n",
        "3. **Experiment Setup:**\n",
        "   - Initialize an MLflow experiment to group all related model training runs.\n",
        "   - Enable MLflow autologging to automatically track model parameters, metrics, and artifacts.\n",
        "\n",
        "4. **Model Training:**\n",
        "   - Train multiple machine learning models using different algorithms.\n",
        "   - For each model, log the accuracy and other relevant metrics to MLflow.\n",
        "   - Save the trained model as an artifact for future reference or deployment.\n",
        "\n",
        "5. **Model Evaluation and Selection:**\n",
        "   - Compare the performance of the different models based on the logged metrics.\n",
        "   - Select the best model and register it in Azure ML for potential deployment.\n",
        "\n",
        "6. **Model Registration and Deployment:**\n",
        "   - Register the best-performing model in Azure ML to ensure it is easily accessible for deployment.\n",
        "   - Optionally, deploy the model as a web service for real-time predictions.\n",
        "\n",
        "7. **Project Documentation:**\n",
        "   - Document the entire process, including data exploration, model selection criteria, and the final decision-making process.\n",
        "\n",
        "## **Expected Outcomes:**\n",
        "\n",
        "- A well-documented machine learning pipeline that can be used to predict diabetes in patients.\n",
        "- The best-performing model registered in Azure ML, ready for deployment or further experimentation.\n",
        "- A clear comparison of various machine learning algorithms in the context of diabetes prediction, providing insights into which algorithm performs best under given conditions.\n",
        "\n",
        "## **Conclusion:**\n",
        "\n",
        "By the end of this project, you will have a comprehensive understanding of how to build, track, and deploy machine learning models using Azure ML and MLflow. The project's primary goal is to identify the best model for predicting diabetes, ensuring it is ready for deployment and further use in real-world applications.\n"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Verify that the necessary packages are installed\n",
        "!pip show azure-ai-ml\n",
        "!pip show mlflow\n",
        "\n",
        "import importlib\n",
        "\n",
        "# List of required packages\n",
        "required_packages = ['azure-ai-ml', 'mlflow']\n",
        "\n",
        "# Function to check if a package is installed\n",
        "def check_package_installed(package_name):\n",
        "    try:\n",
        "        importlib.import_module(package_name)\n",
        "        print(f\"Package '{package_name}' is installed.\")\n",
        "    except ImportError:\n",
        "        print(f\"Package '{package_name}' is NOT installed. You may need to install it using pip.\")\n",
        "\n",
        "# Verify each package\n",
        "for package in required_packages:\n",
        "    check_package_installed(package)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Name: azure-ai-ml\nVersion: 1.19.0\nSummary: Microsoft Azure Machine Learning Client Library for Python\nHome-page: https://github.com/Azure/azure-sdk-for-python\nAuthor: Microsoft Corporation\nAuthor-email: azuresdkengsysadmins@microsoft.com\nLicense: MIT License\nLocation: /anaconda/envs/azureml_py38/lib/python3.9/site-packages\nRequires: azure-common, azure-core, azure-mgmt-core, azure-storage-blob, azure-storage-file-datalake, azure-storage-file-share, colorama, isodate, jsonschema, marshmallow, msrest, opencensus-ext-azure, opencensus-ext-logging, pydash, pyjwt, pyyaml, strictyaml, tqdm, typing-extensions\nRequired-by: \nName: mlflow\nVersion: 2.15.1\nSummary: MLflow is an open source platform for the complete machine learning lifecycle\nHome-page: \nAuthor: \nAuthor-email: \nLicense: Copyright 2018 Databricks, Inc.  All rights reserved.\n        \n                                        Apache License\n                                   Version 2.0, January 2004\n                                http://www.apache.org/licenses/\n        \n           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n        \n           1. Definitions.\n        \n              \"License\" shall mean the terms and conditions for use, reproduction,\n              and distribution as defined by Sections 1 through 9 of this document.\n        \n              \"Licensor\" shall mean the copyright owner or entity authorized by\n              the copyright owner that is granting the License.\n        \n              \"Legal Entity\" shall mean the union of the acting entity and all\n              other entities that control, are controlled by, or are under common\n              control with that entity. For the purposes of this definition,\n              \"control\" means (i) the power, direct or indirect, to cause the\n              direction or management of such entity, whether by contract or\n              otherwise, or (ii) ownership of fifty percent (50%) or more of the\n              outstanding shares, or (iii) beneficial ownership of such entity.\n        \n              \"You\" (or \"Your\") shall mean an individual or Legal Entity\n              exercising permissions granted by this License.\n        \n              \"Source\" form shall mean the preferred form for making modifications,\n              including but not limited to software source code, documentation\n              source, and configuration files.\n        \n              \"Object\" form shall mean any form resulting from mechanical\n              transformation or translation of a Source form, including but\n              not limited to compiled object code, generated documentation,\n              and conversions to other media types.\n        \n              \"Work\" shall mean the work of authorship, whether in Source or\n              Object form, made available under the License, as indicated by a\n              copyright notice that is included in or attached to the work\n              (an example is provided in the Appendix below).\n        \n              \"Derivative Works\" shall mean any work, whether in Source or Object\n              form, that is based on (or derived from) the Work and for which the\n              editorial revisions, annotations, elaborations, or other modifications\n              represent, as a whole, an original work of authorship. For the purposes\n              of this License, Derivative Works shall not include works that remain\n              separable from, or merely link (or bind by name) to the interfaces of,\n              the Work and Derivative Works thereof.\n        \n              \"Contribution\" shall mean any work of authorship, including\n              the original version of the Work and any modifications or additions\n              to that Work or Derivative Works thereof, that is intentionally\n              submitted to Licensor for inclusion in the Work by the copyright owner\n              or by an individual or Legal Entity authorized to submit on behalf of\n              the copyright owner. For the purposes of this definition, \"submitted\"\n              means any form of electronic, verbal, or written communication sent\n              to the Licensor or its representatives, including but not limited to\n              communication on electronic mailing lists, source code control systems,\n              and issue tracking systems that are managed by, or on behalf of, the\n              Licensor for the purpose of discussing and improving the Work, but\n              excluding communication that is conspicuously marked or otherwise\n              designated in writing by the copyright owner as \"Not a Contribution.\"\n        \n              \"Contributor\" shall mean Licensor and any individual or Legal Entity\n              on behalf of whom a Contribution has been received by Licensor and\n              subsequently incorporated within the Work.\n        \n           2. Grant of Copyright License. Subject to the terms and conditions of\n              this License, each Contributor hereby grants to You a perpetual,\n              worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n              copyright license to reproduce, prepare Derivative Works of,\n              publicly display, publicly perform, sublicense, and distribute the\n              Work and such Derivative Works in Source or Object form.\n        \n           3. Grant of Patent License. Subject to the terms and conditions of\n              this License, each Contributor hereby grants to You a perpetual,\n              worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n              (except as stated in this section) patent license to make, have made,\n              use, offer to sell, sell, import, and otherwise transfer the Work,\n              where such license applies only to those patent claims licensable\n              by such Contributor that are necessarily infringed by their\n              Contribution(s) alone or by combination of their Contribution(s)\n              with the Work to which such Contribution(s) was submitted. If You\n              institute patent litigation against any entity (including a\n              cross-claim or counterclaim in a lawsuit) alleging that the Work\n              or a Contribution incorporated within the Work constitutes direct\n              or contributory patent infringement, then any patent licenses\n              granted to You under this License for that Work shall terminate\n              as of the date such litigation is filed.\n        \n           4. Redistribution. You may reproduce and distribute copies of the\n              Work or Derivative Works thereof in any medium, with or without\n              modifications, and in Source or Object form, provided that You\n              meet the following conditions:\n        \n              (a) You must give any other recipients of the Work or\n                  Derivative Works a copy of this License; and\n        \n              (b) You must cause any modified files to carry prominent notices\n                  stating that You changed the files; and\n        \n              (c) You must retain, in the Source form of any Derivative Works\n                  that You distribute, all copyright, patent, trademark, and\n                  attribution notices from the Source form of the Work,\n                  excluding those notices that do not pertain to any part of\n                  the Derivative Works; and\n        \n              (d) If the Work includes a \"NOTICE\" text file as part of its\n                  distribution, then any Derivative Works that You distribute must\n                  include a readable copy of the attribution notices contained\n                  within such NOTICE file, excluding those notices that do not\n                  pertain to any part of the Derivative Works, in at least one\n                  of the following places: within a NOTICE text file distributed\n                  as part of the Derivative Works; within the Source form or\n                  documentation, if provided along with the Derivative Works; or,\n                  within a display generated by the Derivative Works, if and\n                  wherever such third-party notices normally appear. The contents\n                  of the NOTICE file are for informational purposes only and\n                  do not modify the License. You may add Your own attribution\n                  notices within Derivative Works that You distribute, alongside\n                  or as an addendum to the NOTICE text from the Work, provided\n                  that such additional attribution notices cannot be construed\n                  as modifying the License.\n        \n              You may add Your own copyright statement to Your modifications and\n              may provide additional or different license terms and conditions\n              for use, reproduction, or distribution of Your modifications, or\n              for any such Derivative Works as a whole, provided Your use,\n              reproduction, and distribution of the Work otherwise complies with\n              the conditions stated in this License.\n        \n           5. Submission of Contributions. Unless You explicitly state otherwise,\n              any Contribution intentionally submitted for inclusion in the Work\n              by You to the Licensor shall be under the terms and conditions of\n              this License, without any additional terms or conditions.\n              Notwithstanding the above, nothing herein shall supersede or modify\n              the terms of any separate license agreement you may have executed\n              with Licensor regarding such Contributions.\n        \n           6. Trademarks. This License does not grant permission to use the trade\n              names, trademarks, service marks, or product names of the Licensor,\n              except as required for reasonable and customary use in describing the\n              origin of the Work and reproducing the content of the NOTICE file.\n        \n           7. Disclaimer of Warranty. Unless required by applicable law or\n              agreed to in writing, Licensor provides the Work (and each\n              Contributor provides its Contributions) on an \"AS IS\" BASIS,\n              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n              implied, including, without limitation, any warranties or conditions\n              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n              PARTICULAR PURPOSE. You are solely responsible for determining the\n              appropriateness of using or redistributing the Work and assume any\n              risks associated with Your exercise of permissions under this License.\n        \n           8. Limitation of Liability. In no event and under no legal theory,\n              whether in tort (including negligence), contract, or otherwise,\n              unless required by applicable law (such as deliberate and grossly\n              negligent acts) or agreed to in writing, shall any Contributor be\n              liable to You for damages, including any direct, indirect, special,\n              incidental, or consequential damages of any character arising as a\n              result of this License or out of the use or inability to use the\n              Work (including but not limited to damages for loss of goodwill,\n              work stoppage, computer failure or malfunction, or any and all\n              other commercial damages or losses), even if such Contributor\n              has been advised of the possibility of such damages.\n        \n           9. Accepting Warranty or Additional Liability. While redistributing\n              the Work or Derivative Works thereof, You may choose to offer,\n              and charge a fee for, acceptance of support, warranty, indemnity,\n              or other liability obligations and/or rights consistent with this\n              License. However, in accepting such obligations, You may act only\n              on Your own behalf and on Your sole responsibility, not on behalf\n              of any other Contributor, and only if You agree to indemnify,\n              defend, and hold each Contributor harmless for any liability\n              incurred by, or claims asserted against, such Contributor by reason\n              of your accepting any such warranty or additional liability.\n        \n           END OF TERMS AND CONDITIONS\n           APPENDIX: How to apply the Apache License to your work.\n        \n              To apply the Apache License to your work, attach the following\n              boilerplate notice, with the fields enclosed by brackets \"[]\"\n              replaced with your own identifying information. (Don't include\n              the brackets!)  The text should be enclosed in the appropriate\n              comment syntax for the file format. We also recommend that a\n              file or class name and description of purpose be included on the\n              same \"printed page\" as the copyright notice for easier\n              identification within third-party archives.\n        \n           Copyright [yyyy] [name of copyright owner]\n        \n           Licensed under the Apache License, Version 2.0 (the \"License\");\n           you may not use this file except in compliance with the License.\n           You may obtain a copy of the License at\n        \n               http://www.apache.org/licenses/LICENSE-2.0\n        \n           Unless required by applicable law or agreed to in writing, software\n           distributed under the License is distributed on an \"AS IS\" BASIS,\n           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n           See the License for the specific language governing permissions and\n           limitations under the License.\n        \nLocation: /anaconda/envs/azureml_py38/lib/python3.9/site-packages\nRequires: alembic, docker, Flask, graphene, gunicorn, Jinja2, markdown, matplotlib, mlflow-skinny, numpy, pandas, pyarrow, querystring-parser, scikit-learn, scipy, sqlalchemy\nRequired-by: \nPackage 'azure-ai-ml' is NOT installed. You may need to install it using pip.\nPackage 'mlflow' is installed.\n"
        }
      ],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1724647556706
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Connect to your Azure ML workspace\n",
        "from azure.identity import DefaultAzureCredential, InteractiveBrowserCredential\n",
        "from azure.ai.ml import MLClient\n",
        "\n",
        "try:\n",
        "    credential = DefaultAzureCredential()\n",
        "    credential.get_token(\"https://management.azure.com/.default\")\n",
        "except Exception as ex:\n",
        "    credential = InteractiveBrowserCredential()"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1724647559680
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get a handle to the workspace\n",
        "ml_client = MLClient.from_config(credential=credential)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "Found the config file in: /config.json\n"
        }
      ],
      "execution_count": 3,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1724647559818
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import mlflow\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "import joblib\n",
        "import uuid\n",
        "import os"
      ],
      "outputs": [],
      "execution_count": 4,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1724647560701
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the diabetes dataset\n",
        "print(\"Reading data...\")\n",
        "df = pd.read_csv('./data/diabetes.csv')\n",
        "df.head()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Reading data...\n"
        },
        {
          "output_type": "execute_result",
          "execution_count": 5,
          "data": {
            "text/plain": "   PatientID  Pregnancies  PlasmaGlucose  DiastolicBloodPressure  \\\n0    1354778            0            171                      80   \n1    1147438            8             92                      93   \n2    1640031            7            115                      47   \n3    1883350            9            103                      78   \n4    1424119            1             85                      59   \n\n   TricepsThickness  SerumInsulin        BMI  DiabetesPedigree  Age  Diabetic  \n0                34            23  43.509726          1.213191   21         0  \n1                47            36  21.240576          0.158365   23         0  \n2                52            35  41.511523          0.079019   23         0  \n3                25           304  29.582192          1.282870   43         1  \n4                27            35  42.604536          0.549542   22         0  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PatientID</th>\n      <th>Pregnancies</th>\n      <th>PlasmaGlucose</th>\n      <th>DiastolicBloodPressure</th>\n      <th>TricepsThickness</th>\n      <th>SerumInsulin</th>\n      <th>BMI</th>\n      <th>DiabetesPedigree</th>\n      <th>Age</th>\n      <th>Diabetic</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1354778</td>\n      <td>0</td>\n      <td>171</td>\n      <td>80</td>\n      <td>34</td>\n      <td>23</td>\n      <td>43.509726</td>\n      <td>1.213191</td>\n      <td>21</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1147438</td>\n      <td>8</td>\n      <td>92</td>\n      <td>93</td>\n      <td>47</td>\n      <td>36</td>\n      <td>21.240576</td>\n      <td>0.158365</td>\n      <td>23</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1640031</td>\n      <td>7</td>\n      <td>115</td>\n      <td>47</td>\n      <td>52</td>\n      <td>35</td>\n      <td>41.511523</td>\n      <td>0.079019</td>\n      <td>23</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1883350</td>\n      <td>9</td>\n      <td>103</td>\n      <td>78</td>\n      <td>25</td>\n      <td>304</td>\n      <td>29.582192</td>\n      <td>1.282870</td>\n      <td>43</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1424119</td>\n      <td>1</td>\n      <td>85</td>\n      <td>59</td>\n      <td>27</td>\n      <td>35</td>\n      <td>42.604536</td>\n      <td>0.549542</td>\n      <td>22</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 5,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1724647560963
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Set up the experiment\n",
        "experiment_name = \"mlflow-experiment-diabetes\"\n",
        "mlflow.set_experiment(experiment_name)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 6,
          "data": {
            "text/plain": "<Experiment: artifact_location='', creation_time=1723789911873, experiment_id='06172f1b-0794-4170-a26f-7350eab418ea', last_update_time=None, lifecycle_stage='active', name='mlflow-experiment-diabetes', tags={}>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 6,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1724647561149
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Log the dataset manually as an artifact\n",
        "with mlflow.start_run(run_name=\"dataset_logging\"):\n",
        "    # Save the dataset to a CSV file\n",
        "    dataset_path = \"./data/diabetes_logged.csv\"\n",
        "    df.to_csv(dataset_path, index=False)\n",
        "    \n",
        "    # Log the dataset file\n",
        "    mlflow.log_artifact(dataset_path, artifact_path=\"datasets\")\n",
        "\n"
      ],
      "outputs": [],
      "execution_count": 7,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1724647561731
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Prepare the data for model training\n",
        "X, y = df[['Pregnancies','PlasmaGlucose','DiastolicBloodPressure','TricepsThickness','SerumInsulin','BMI','DiabetesPedigree','Age']].values, df['Diabetic'].values\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)"
      ],
      "outputs": [],
      "execution_count": 8,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1724647561839
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize models\n",
        "models = {\n",
        "    \"Logistic Regression\": LogisticRegression(C=1/0.1, solver=\"liblinear\"),\n",
        "    \"Decision Tree\": DecisionTreeClassifier(),\n",
        "    \"Random Forest\": RandomForestClassifier(n_estimators=100)\n",
        "}\n",
        "\n",
        "best_accuracy = 0\n",
        "best_model_run = None\n",
        "best_model_name = None"
      ],
      "outputs": [],
      "execution_count": 9,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1724647561935
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Train and log models manually\n",
        "for model_name, model in models.items():\n",
        "    with mlflow.start_run(run_name=model_name):\n",
        "        # Log model parameters\n",
        "        if model_name == \"Logistic Regression\":\n",
        "            mlflow.log_param(\"C\", 1/0.1)\n",
        "            mlflow.log_param(\"solver\", \"liblinear\")\n",
        "        elif model_name == \"Decision Tree\":\n",
        "            mlflow.log_param(\"criterion\", \"gini\")  # or another parameter if specified\n",
        "        elif model_name == \"Random Forest\":\n",
        "            mlflow.log_param(\"n_estimators\", 100)\n",
        "\n",
        "        # Train the model\n",
        "        model.fit(X_train, y_train)\n",
        "\n",
        "        # Make predictions\n",
        "        y_pred = model.predict(X_test)\n",
        "\n",
        "        # Calculate accuracy\n",
        "        accuracy = accuracy_score(y_test, y_pred)\n",
        "        mlflow.log_metric(\"accuracy\", accuracy)\n",
        "\n",
        "        # Save the model to a file\n",
        "        model_filename = f\"{model_name.replace(' ', '')}_model.pkl\"\n",
        "        joblib.dump(model, model_filename)\n",
        "\n",
        "        # Log the model as an artifact\n",
        "        mlflow.log_artifact(model_filename, artifact_path=\"models\")\n",
        "\n",
        "        # Check if this model is the best so far\n",
        "        if accuracy > best_accuracy:\n",
        "            best_accuracy = accuracy\n",
        "            best_model_run = mlflow.active_run().info.run_id\n",
        "            best_model_name = model_name"
      ],
      "outputs": [],
      "execution_count": 10,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1724647567691
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "\n",
        "# Correct the model filename\n",
        "model_filename = f\"{best_model_name.replace(' ', '')}_model.pkl\"\n",
        "\n",
        "# Construct the correct model URI\n",
        "model_uri = f\"runs:/{best_model_run}/models/{model_filename}\"\n",
        "\n",
        "# Clean the model name to ensure it's valid\n",
        "def clean_model_name(name):\n",
        "    return re.sub(r'[^a-zA-Z0-9_-]', '', name.replace(' ', '_'))\n",
        "\n",
        "cleaned_model_name = clean_model_name(f\"{best_model_name}_Model\")\n",
        "\n",
        "# Verify the model URI exists\n",
        "try:\n",
        "    artifacts = mlflow.artifacts.download_artifacts(artifact_uri=f\"runs:/{best_model_run}/models\")\n",
        "    print(f\"Available artifacts: {artifacts}\")\n",
        "except Exception as e:\n",
        "    print(f\"Error verifying model URI: {str(e)}\")\n",
        "    print(\"Please check that the model file exists and the URI is correct.\")\n",
        "\n",
        "# Attempt to register the model\n",
        "try:\n",
        "    model_details = mlflow.register_model(\n",
        "        model_uri=model_uri,\n",
        "        name=cleaned_model_name\n",
        "    )\n",
        "    print(f\"Model registered: {model_details.name} version {model_details.version}\")\n",
        "except mlflow.exceptions.MlflowException as e:\n",
        "    if \"RESOURCE_ALREADY_EXISTS\" in str(e):\n",
        "        print(f\"Model {cleaned_model_name} already exists. Attempting to create a new version...\")\n",
        "        try:\n",
        "            new_version = mlflow.register_model(\n",
        "                model_uri=model_uri,\n",
        "                name=cleaned_model_name\n",
        "            )\n",
        "            print(f\"New version created: {new_version.version}\")\n",
        "        except Exception as e2:\n",
        "            print(f\"Failed to create new version: {str(e2)}\")\n",
        "    elif \"RESOURCE_DOES_NOT_EXIST\" in str(e):\n",
        "        print(f\"The specified model file does not exist. Please check the model URI: {model_uri}\")\n",
        "        print(\"Available files in the 'models' directory:\")\n",
        "        try:\n",
        "            files = mlflow.artifacts.list_artifacts(f\"runs:/{best_model_run}/models\")\n",
        "            for file in files:\n",
        "                print(file.path)\n",
        "        except Exception as e2:\n",
        "            print(f\"Error listing artifacts: {str(e2)}\")\n",
        "    else:\n",
        "        print(f\"Failed to register model: {str(e)}\")\n",
        "\n",
        "# Print the best model\n",
        "print(f\"Best model: {best_model_name} with accuracy {best_accuracy:.4f}\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "/anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\nDownloading artifacts: 100%|██████████| 1/1 [00:00<00:00,  4.34it/s]\nRegistered model 'Random_Forest_Model' already exists. Creating a new version of this model...\n2024/08/26 04:46:09 INFO mlflow.store.model_registry.abstract_store: Waiting up to 300 seconds for model version to finish creation. Model name: Random_Forest_Model, version 8\nCreated version '8' of model 'Random_Forest_Model'.\n"
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Available artifacts: /tmp/tmp12_jd1p4/models\nModel registered: Random_Forest_Model version 8\nBest model: Random Forest with accuracy 0.9323\n"
        }
      ],
      "execution_count": 11,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1724647570735
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python310-sdkv2",
      "language": "python",
      "display_name": "Python 3.10 - SDK v2"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.14",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "kernel_info": {
      "name": "python310-sdkv2"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}